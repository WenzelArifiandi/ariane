name: "Auto-Import Cloudflare Access Resources"

on:
    workflow_dispatch:

env:
    TF_IN_AUTOMATION: true
    TF_VAR_cloudflare_api_token: ${{ secrets.TERRAFORM_ACCESS }}
    TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    TF_VAR_cipher_client_id: ${{ secrets.CIPHER_CLIENT_ID }}
    TF_VAR_cipher_client_secret: ${{ secrets.CIPHER_CLIENT_SECRET }}
    TF_VAR_cipher_issuer_url: "https://cipher.wenzelarifiandi.com"
    APP_ID: "2768b19d-a8a6-4866-b42f-f4881629edaf"

jobs:
    auto-import:
        name: "Auto-Import Resources"
        runs-on: ubuntu-latest
        environment: prod
        permissions:
            contents: read

        defaults:
            run:
                working-directory: infrastructure/cloudflare-access

        steps:
            - name: Checkout repository
              uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@651471c36a6092792c552e8b1bef71e592b462d8 # v3.1.1
              with:
                  terraform_version: 1.9.0

            - name: Install jq
              run: sudo apt-get update && sudo apt-get install -y jq

            - name: Terraform Init
              run: terraform init

            - name: Discover Identity Provider
              id: discover
              run: |
                  echo "🔍 Discovering Identity Provider ID..."

                  IDP_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.TERRAFORM_ACCESS }}" \
                       -H "Content-Type: application/json" \
                       "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/access/identity_providers")

                  echo "$IDP_RESPONSE" | jq '.'

                  IDP_ID=$(echo "$IDP_RESPONSE" | jq -r '.result[] | select(.name == "Cipher OIDC" or (.name | test("cipher"; "i"))) | .id' | head -1)

                  if [[ -n "$IDP_ID" ]] && [[ "$IDP_ID" != "null" ]]; then
                      echo "✅ Found Identity Provider ID: $IDP_ID"
                      echo "idp_id=$IDP_ID" >> $GITHUB_OUTPUT
                  else
                      echo "❌ Could not find Cipher Identity Provider"
                      echo "Available providers:"
                      echo "$IDP_RESPONSE" | jq -r '.result[] | "  - \(.name) (\(.type)): \(.id)"'
                      exit 1
                  fi

            - name: Import Access Application
              continue-on-error: true
              run: |
                  echo "📥 Importing Access Application..."
                  terraform import \
                    cloudflare_zero_trust_access_application.cipher \
                    "accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/${{ env.APP_ID }}"

            - name: Import Identity Provider
              continue-on-error: true
              run: |
                  echo "📥 Importing Identity Provider..."
                  terraform import \
                    cloudflare_zero_trust_access_identity_provider.cipher_oidc \
                    "accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/${{ steps.discover.outputs.idp_id }}"

            - name: Discover and Import Policies
              continue-on-error: true
              run: |
                  echo "🔍 Discovering Access Policies..."

                  POLICIES_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.TERRAFORM_ACCESS }}" \
                       -H "Content-Type: application/json" \
                       "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/access/apps/${{ env.APP_ID }}/policies")

                  echo "$POLICIES_RESPONSE" | jq '.'

                  # Get policy IDs
                  POLICY_1_ID=$(echo "$POLICIES_RESPONSE" | jq -r '.result[0].id // empty')
                  POLICY_2_ID=$(echo "$POLICIES_RESPONSE" | jq -r '.result[1].id // empty')

                  if [[ -n "$POLICY_1_ID" ]]; then
                      echo "📥 Importing first policy ($POLICY_1_ID)..."
                      terraform import \
                        cloudflare_zero_trust_access_policy.cipher_oidc_policy \
                        "accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/$POLICY_1_ID" || echo "Policy 1 may already be imported"
                  fi

                  if [[ -n "$POLICY_2_ID" ]]; then
                      echo "📥 Importing second policy ($POLICY_2_ID)..."
                      terraform import \
                        cloudflare_zero_trust_access_policy.cipher_service_policy \
                        "accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/$POLICY_2_ID" || echo "Policy 2 may already be imported"
                  fi

            - name: Discover and Import Service Token
              continue-on-error: true
              run: |
                  echo "🔍 Discovering Service Token..."

                  TOKENS_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.TERRAFORM_ACCESS }}" \
                       -H "Content-Type: application/json" \
                       "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/access/service_tokens")

                  echo "$TOKENS_RESPONSE" | jq '.'

                  TOKEN_ID=$(echo "$TOKENS_RESPONSE" | jq -r '.result[] | select(.name == "Cipher Service Token" or (.name | test("cipher"; "i"))) | .id' | head -1)

                  if [[ -n "$TOKEN_ID" ]] && [[ "$TOKEN_ID" != "null" ]]; then
                      echo "📥 Importing Service Token ($TOKEN_ID)..."
                      terraform import \
                        cloudflare_zero_trust_access_service_token.cipher_service_token \
                        "accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/$TOKEN_ID" || echo "Token may already be imported"
                  fi

            - name: Show Imported Resources
              run: |
                  echo "## 📋 Imported Resources" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  terraform state list >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY

            - name: Run Terraform Plan
              run: |
                  echo "🎯 Running plan to check configuration..."
                  terraform plan -no-color -out=cfplan | tee plan-output.txt

                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "## 📊 Plan After Import" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  head -n 100 plan-output.txt >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY

            - name: Success Summary
              run: |
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "## ✅ Import Complete!" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "All resources have been imported into Terraform state." >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### 🎯 Next Steps:" >> $GITHUB_STEP_SUMMARY
                  echo "1. Review the plan output above" >> $GITHUB_STEP_SUMMARY
                  echo "2. The main deployment workflow should now work!" >> $GITHUB_STEP_SUMMARY
                  echo "3. Push changes will automatically apply via cloudflare-access.yml" >> $GITHUB_STEP_SUMMARY
