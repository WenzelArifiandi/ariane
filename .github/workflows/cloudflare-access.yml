name: "Cloudflare Access Deployment"

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

  push:
    branches:
      - main
    paths:
      - "infrastructure/cloudflare-access/**"
      - ".github/workflows/cloudflare-access.yml"

env:
  TF_IN_AUTOMATION: true
  TF_VAR_cloudflare_api_token: ${{ secrets.TERRAFORM_ACCESS }}
  TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  TF_VAR_cipher_client_id: ${{ secrets.CIPHER_CLIENT_ID }}
  TF_VAR_cipher_client_secret: ${{ secrets.CIPHER_CLIENT_SECRET }}
  TF_VAR_cipher_issuer_url: "https://cipher.wenzelarifiandi.com"

jobs:
  terraform:
    name: "Terraform Cloudflare Access"
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      pull-requests: write
      security-events: write

    defaults:
      run:
        working-directory: infrastructure/cloudflare-access

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@651471c36a6092792c552e8b1bef71e592b462d8 # v3.1.1
        with:
          terraform_version: 1.9.0

      - name: Validate required secrets
        run: |
          if [[ -z "${{ secrets.TERRAFORM_ACCESS }}" ]]; then
            echo "‚ùå TERRAFORM_ACCESS secret is not set"
            exit 1
          fi
          if [[ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]]; then
            echo "‚ùå CLOUDFLARE_ACCOUNT_ID secret is not set"
            exit 1
          fi
          if [[ -z "${{ secrets.CIPHER_CLIENT_ID }}" ]]; then
            echo "‚ùå CIPHER_CLIENT_ID secret is not set"
            exit 1
          fi
          if [[ -z "${{ secrets.CIPHER_CLIENT_SECRET }}" ]]; then
            echo "‚ùå CIPHER_CLIENT_SECRET secret is not set"
            exit 1
          fi
          echo "‚úÖ All required secrets are configured"

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Nuke All Existing Resources
        run: |
          echo "üóëÔ∏è Deleting all existing Access resources to avoid conflicts..."
          export CLOUDFLARE_API_TOKEN="${{ secrets.TERRAFORM_ACCESS }}"
          export CLOUDFLARE_ACCOUNT_ID="${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          ./nuke-everything.sh

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          # Run full terraform plan (no targeting after import)
          terraform plan \
            -input=false \
            -out=cfplan \
            -detailed-exitcode
        continue-on-error: true

      - name: Generate Plan Summary
        if: steps.plan.outcome == 'success'
        run: |
          echo "## üìã Cloudflare Access Plan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Resources:" >> $GITHUB_STEP_SUMMARY
          echo "- Access Application: wenzelarifiandi.com/maker" >> $GITHUB_STEP_SUMMARY
          echo "- Identity Provider: Cipher OIDC (ZITADEL)" >> $GITHUB_STEP_SUMMARY
          echo "- Access Policy: Allow Cipher OIDC Users" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Plan Output:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          terraform show -no-color cfplan 2>&1 | head -n 50 >> $GITHUB_STEP_SUMMARY || echo "Plan details available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload Terraform Plan
        if: steps.plan.outcome == 'success'
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: cloudflare-terraform-plan
          path: infrastructure/cloudflare-access/cfplan
          retention-days: 7

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request' && steps.plan.outcome == 'success'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const plan = `
            ## üîê Cloudflare Access Plan

            ### Resources:
            - **Application**: wenzelarifiandi.com/maker
            - **Identity Provider**: Cipher OIDC (ZITADEL)
            - **Policy**: Allow Cipher OIDC Users

            <details>
            <summary>üìä Show Plan Details</summary>

            Check the Actions summary for full plan output.

            </details>

            ### üöÄ Next Steps:
            - Review the plan
            - Merge to apply changes automatically
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: plan
            })

      - name: Terraform Apply
        if: (github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main')) && steps.plan.outcome == 'success'
        continue-on-error: true
        id: apply
        run: |
          echo "üöÄ Applying Cloudflare Access configuration..."
          terraform apply -auto-approve cfplan

          echo "‚úÖ Cloudflare Access deployed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéâ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "- **Protected Path**: wenzelarifiandi.com/maker" >> $GITHUB_STEP_SUMMARY
          echo "- **Identity Provider**: Cipher OIDC (ZITADEL)" >> $GITHUB_STEP_SUMMARY
          echo "- **Session Duration**: 24 hours" >> $GITHUB_STEP_SUMMARY

      - name: Handle Already Exists Error
        if: steps.apply.outcome == 'failure'
        run: |
          echo "## ‚ö†Ô∏è Resources Already Exist" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Cloudflare Access resources already exist and need to be imported into Terraform state." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã How to Fix:" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to [Cloudflare Dashboard](https://dash.cloudflare.com) ‚Üí Zero Trust ‚Üí Access ‚Üí Applications" >> $GITHUB_STEP_SUMMARY
          echo "2. Find the 'Cipher Application' and note its ID" >> $GITHUB_STEP_SUMMARY
          echo "3. Go to Identity Providers and find 'Cipher OIDC', note its ID" >> $GITHUB_STEP_SUMMARY
          echo "4. Run the [Import Workflow](https://github.com/${{ github.repository }}/actions/workflows/cloudflare-access-import.yml) with these IDs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Alternative (Local):" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo 'cd infrastructure/cloudflare-access' >> $GITHUB_STEP_SUMMARY
          echo './import-existing-resources.sh' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "See [IMPORT_GUIDE.md](https://github.com/${{ github.repository }}/blob/main/infrastructure/cloudflare-access/IMPORT_GUIDE.md) for details." >> $GITHUB_STEP_SUMMARY

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          echo "üóëÔ∏è Destroying Cloudflare Access resources..."
          terraform destroy -auto-approve

      - name: Generate Outputs
        if: (github.event.inputs.action == 'apply' || github.event_name == 'push') && steps.apply.outcome == 'success'
        run: |
          echo "## üîê Access Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          terraform output -json maker_application | jq -r '
            "### üì± Maker Application:",
            "- **Name**: " + .name,
            "- **Domain**: " + .domain,
            "- **Application ID**: " + .id,
            ""
          ' >> $GITHUB_STEP_SUMMARY || echo "Output details available via terraform output" >> $GITHUB_STEP_SUMMARY

      - name: Security Scan
        if: steps.plan.outcome == 'success'
        run: |
          echo "üîç Running security checks..."
          # Check for hardcoded secrets (basic check) - exclude example files
          if grep -r "sk-[a-zA-Z0-9]{20,}" . --exclude-dir=.terraform --exclude="*.example" --exclude="*.md" 2>/dev/null; then
            echo "‚ö†Ô∏è Potential hardcoded secrets detected"
            exit 1
          fi
          echo "‚úÖ No hardcoded secrets found"

      - name: Cleanup
        if: always()
        run: |
          # Clean up sensitive plan files
          rm -f cfplan tfplan terraform.tfstate.backup
          # Clean up any temp files
          find . -name "*.tmp" -delete
