name: 📊 Update Status Badges

on:
  schedule:
    # Update badges every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  update-badges:
    name: 📊 Update README Status Badges
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔍 Check Service Health
      id: health-check
      run: |
        echo "🏥 Checking service health..."

        # Check Zitadel OIDC endpoint
        if curl -s --max-time 10 https://auth.wenzelarifiandi.com/.well-known/openid-configuration >/dev/null 2>&1; then
          echo "zitadel_status=up" >> $GITHUB_OUTPUT
        else
          echo "zitadel_status=down" >> $GITHUB_OUTPUT
        fi

        # Check Console
        if curl -s --max-time 10 https://auth.wenzelarifiandi.com/ui/console >/dev/null 2>&1; then
          echo "console_status=up" >> $GITHUB_OUTPUT
        else
          echo "console_status=down" >> $GITHUB_OUTPUT
        fi

        # Check response time
        response_time=$(curl -s -o /dev/null -w "%{time_total}" --max-time 10 https://auth.wenzelarifiandi.com/.well-known/openid-configuration 2>/dev/null || echo "timeout")
        if [ "$response_time" != "timeout" ]; then
          response_ms=$(echo "$response_time * 1000" | bc -l | cut -d. -f1)
          echo "response_time=${response_ms}ms" >> $GITHUB_OUTPUT
        else
          echo "response_time=timeout" >> $GITHUB_OUTPUT
        fi

    - name: 📊 Generate Status Report
      run: |
        echo "📊 Generating status report..."

        # Create status report
        cat > status-report.md << EOF
        # 📊 System Status Report

        **Generated:** $(date -Iseconds)

        ## Service Health
        - **Zitadel OIDC:** ${{ steps.health-check.outputs.zitadel_status }}
        - **Console UI:** ${{ steps.health-check.outputs.console_status }}
        - **Response Time:** ${{ steps.health-check.outputs.response_time }}

        ## Latest Workflow Status
        $(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=5" | \
          jq -r '.workflow_runs[] | "- **\(.name):** \(.status) (\(.conclusion // "running"))"')

        ---
        🤖 *Auto-generated by GitHub Actions*
        EOF

        cat status-report.md

    - name: 📋 Upload Status Report
      uses: actions/upload-artifact@v4
      with:
        name: status-report-${{ github.run_number }}
        path: status-report.md
        retention-days: 7

    - name: 💬 Create Status Issue (if failures detected)
      if: steps.health-check.outputs.zitadel_status == 'down' || steps.health-check.outputs.console_status == 'down'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = '🚨 Service Health Alert';
          const body = `# Service Health Alert

          **Detection Time:** ${new Date().toISOString()}

          ## ❌ Service Issues Detected

          - **Zitadel OIDC:** ${{ steps.health-check.outputs.zitadel_status }}
          - **Console UI:** ${{ steps.health-check.outputs.console_status }}
          - **Response Time:** ${{ steps.health-check.outputs.response_time }}

          ## 🔍 Troubleshooting Steps

          1. Check Oracle Cloud instance status
          2. Verify Docker services: \`docker-compose ps\`
          3. Check Zitadel logs: \`docker-compose logs zitadel\`
          4. Verify SSL certificates
          5. Check DNS resolution

          ## 🔗 Quick Links

          - [Zitadel Console](https://auth.wenzelarifiandi.com/ui/console)
          - [OIDC Discovery](https://auth.wenzelarifiandi.com/.well-known/openid-configuration)
          - [GitHub Actions](https://github.com/${{ github.repository }}/actions)

          ---
          🤖 *Auto-generated by health monitoring*
          `;

          // Check if there's already an open health alert issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'health-alert'
          });

          if (issues.data.length === 0) {
            // Create new issue if none exists
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['health-alert', 'automated', 'urgent']
            });
            console.log('🚨 Health alert issue created');
          } else {
            // Update existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues.data[0].number,
              body: `**Update:** ${new Date().toISOString()}\n\n${body}`
            });
            console.log('🔄 Health alert issue updated');
          }

    - name: ✅ Close Health Alert Issues (if services recovered)
      if: steps.health-check.outputs.zitadel_status == 'up' && steps.health-check.outputs.console_status == 'up'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Find open health alert issues
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'health-alert'
          });

          for (const issue of issues.data) {
            // Close the issue with recovery message
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `✅ **Services Recovered**

              **Recovery Time:** ${new Date().toISOString()}

              All monitored services are now operational:
              - **Zitadel OIDC:** up
              - **Console UI:** up
              - **Response Time:** ${{ steps.health-check.outputs.response_time }}

              Closing this health alert. 🎉

              ---
              🤖 *Auto-resolved by health monitoring*`
            });

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });

            console.log(`✅ Closed health alert issue #${issue.number}`);
          }

  badge-update:
    name: 🏷️ Update Dynamic Badges
    runs-on: ubuntu-latest
    needs: update-badges

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏷️ Update Badge Endpoints
      run: |
        echo "🏷️ Badge endpoints are automatically updated by shields.io"
        echo "The following badges auto-refresh:"
        echo "  - GitHub Actions workflow badges"
        echo "  - Website status badges"
        echo "  - Security vulnerability badges"
        echo "  - Dependabot status badges"
        echo ""
        echo "No manual update needed - badges refresh automatically!"

    - name: 📊 Generate Badge Summary
      run: |
        echo "📊 Current badge status:"
        echo "  ✅ All badges configured for auto-refresh"
        echo "  🔄 Shields.io provides real-time status"
        echo "  🏥 Service health monitored every 6 hours"
        echo "  🔍 Issues auto-created for service failures"