name: Branch Protection Enforcement

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  checks: write
  pull-requests: write
  statuses: write

jobs:
  enforce-ci-requirements:
    runs-on: ubuntu-latest
    if: github.base_ref == 'main'
    steps:
      - name: Check CI Status
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pullNumber = context.payload.pull_request?.number;

            if (!pullNumber) {
              console.log('No pull request number found');
              return;
            }

            // Get PR details
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: pullNumber
            });

            const sha = pr.data.head.sha;

            // Get required status checks from branch protection
            const branchProtection = await github.rest.repos.getBranchProtection({
              owner,
              repo,
              branch: 'main'
            });

            const requiredChecks = branchProtection.data.required_status_checks?.contexts || [];
            console.log(`Required status checks: ${requiredChecks.join(', ') || 'none'}`);

            // Wait for REQUIRED CI checks to complete
            let attempts = 0;
            const maxAttempts = 10; // Reduced from 30 to 10
            let requiredChecksPassed = false;

            while (attempts < maxAttempts && !requiredChecksPassed) {
              attempts++;

              // Get check runs for this commit
              const checkRuns = await github.rest.checks.listForRef({
                owner,
                repo,
                ref: sha
              });

              // Get commit statuses
              const statuses = await github.rest.repos.listCommitStatusesForRef({
                owner,
                repo,
                ref: sha
              });

              console.log(`Attempt ${attempts}: Found ${checkRuns.data.check_runs.length} check runs and ${statuses.data.length} statuses`);

              // If no required checks are configured, pass immediately
              if (requiredChecks.length === 0) {
                console.log('No required status checks configured - allowing merge');
                requiredChecksPassed = true;
                break;
              }

              // Check ONLY required checks
              const requiredCheckStatuses = [];

              // Check required checks in check runs
              for (const checkName of requiredChecks) {
                const checkRun = checkRuns.data.check_runs.find(c => c.name === checkName);
                if (checkRun) {
                  requiredCheckStatuses.push({
                    name: checkName,
                    status: checkRun.status,
                    conclusion: checkRun.conclusion
                  });
                }
              }

              // Check required checks in commit statuses
              for (const checkName of requiredChecks) {
                const status = statuses.data.find(s => s.context === checkName);
                if (status) {
                  requiredCheckStatuses.push({
                    name: checkName,
                    status: 'completed',
                    conclusion: status.state === 'success' ? 'success' : status.state
                  });
                }
              }

              console.log(`Required checks status: ${requiredCheckStatuses.map(c => `${c.name}:${c.conclusion}`).join(', ')}`);

              // Check if required checks are pending
              const pendingRequired = requiredCheckStatuses.filter(
                check => check.status !== 'completed' || check.conclusion === 'pending'
              );

              if (pendingRequired.length > 0) {
                console.log(`Still waiting for required checks: ${pendingRequired.map(c => c.name).join(', ')}`);
                await new Promise(resolve => setTimeout(resolve, 15000)); // Wait 15 seconds
                continue;
              }

              // Check if required checks failed
              const failedRequired = requiredCheckStatuses.filter(
                check => check.conclusion !== 'success' && check.conclusion !== 'neutral' && check.conclusion !== 'skipped'
              );

              if (failedRequired.length > 0) {
                core.setFailed(`Required CI checks failed: ${failedRequired.map(c => c.name).join(', ')}`);
                return;
              }

              requiredChecksPassed = true;
              console.log('All required CI checks passed successfully!');
            }

            if (!requiredChecksPassed) {
              core.setFailed('Timeout waiting for required CI checks to complete');
              return;
            }

            // Set a success status
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha,
              state: 'success',
              context: 'branch-protection/ci-requirements',
              description: 'All required CI checks passed'
            });

  block-force-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Block Direct Push to Main
        uses: actions/github-script@v7
        with:
          script: |
            core.setFailed('Direct pushes to main branch are not allowed. Please use pull requests.');
