name: üõ°Ô∏è Auto Security Fixes (Safe)

on:
  schedule:
    # Run daily at 2 AM UTC to check for security issues
    - cron: '0 2 * * *'
  workflow_dispatch:
  # Trigger when Dependabot creates PRs
  pull_request:
    types: [opened, synchronize]
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

env:
  NODE_VERSION: '22.x'

jobs:
  auto-fix-vulnerabilities:
    name: üîß Auto Fix Security Vulnerabilities
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: npm
          cache-dependency-path: |
            site/package-lock.json
            studio/package-lock.json

      - name: üì¶ Install Dependencies (Site)  
        run: |
          cd site
          npm ci --audit=false
          echo "‚úÖ Site dependencies installed"

      - name: üì¶ Install Dependencies (Studio)
        run: |
          cd studio  
          npm ci --audit=false
          echo "‚úÖ Studio dependencies installed"

      - name: üîç ESLint Auto-fix (Site)
        continue-on-error: true
        run: |
          cd site
          npx eslint . --fix --ext .js,.ts,.astro --format=compact || {
            echo "‚ö†Ô∏è Some ESLint issues couldn't be auto-fixed"
            echo "Manual review may be required"
          }
          echo "‚úÖ ESLint auto-fix completed for site"

      - name: üîç ESLint Auto-fix (Studio)
        continue-on-error: true
        run: |
          cd studio
          npx eslint . --fix --ext .js,.ts,.tsx --format=compact || {  
            echo "‚ö†Ô∏è Some ESLint issues couldn't be auto-fixed"
            echo "Manual review may be required"
          }
          echo "‚úÖ ESLint auto-fix completed for studio"

      - name: üîí Dependency Security Audit & Fix
        continue-on-error: true
        run: |
          echo "üîç Checking site dependencies..."
          cd site
          npm audit --audit-level=moderate --json > audit-site.json || {
            echo "üìã Site audit found issues, attempting fixes..."
            npm audit fix --audit-level=moderate --force || {
              echo "‚ö†Ô∏è Some site vulnerabilities require manual intervention"
            }
          }
          
          echo "üîç Checking studio dependencies..."
          cd ../studio
          npm audit --audit-level=moderate --json > audit-studio.json || {
            echo "üìã Studio audit found issues, attempting fixes..."
            npm audit fix --audit-level=moderate --force || {
              echo "‚ö†Ô∏è Some studio vulnerabilities require manual intervention"
            }
          }
          echo "‚úÖ Security audit completed"

      - name: üßπ TypeScript Strict Improvements
        continue-on-error: true
        run: |
          echo "üîß Applying TypeScript strict mode improvements..."
          
          # Replace 'any' types with more specific types
          find site/src -name "*.ts" -o -name "*.tsx" -o -name "*.astro" | while read file; do
            if grep -q ': any' "$file"; then
              echo "üìù Found 'any' types in $file"
              # Simple replacements for common patterns
              sed -i.bak 's/: any\[\]/: unknown[]/g' "$file"
              sed -i.bak 's/: any$/: unknown/g' "$file"
              rm -f "${file}.bak"
            fi
          done
          
          find studio/src -name "*.ts" -o -name "*.tsx" | while read file; do
            if grep -q ': any' "$file"; then
              echo "üìù Found 'any' types in $file"
              sed -i.bak 's/: any\[\]/: unknown[]/g' "$file"
              sed -i.bak 's/: any$/: unknown/g' "$file"
              rm -f "${file}.bak"
            fi
          done
          
          echo "‚úÖ TypeScript improvements applied"

      - name: üîê Security Headers Check
        continue-on-error: true
        run: |
          echo "üîç Checking for security headers in middleware..."
          
          # Check if security headers are present in middleware
          if [ -f "site/src/middleware.ts" ]; then
            if ! grep -q "X-Frame-Options\|Content-Security-Policy\|X-Content-Type-Options" site/src/middleware.ts; then
              echo "‚ö†Ô∏è Security headers not found in middleware"
              echo "Consider adding security headers for better protection"
            else
              echo "‚úÖ Security headers found in middleware"
            fi
          fi

      - name: üìä Generate Security Report
        continue-on-error: true
        run: |
          echo "# üõ°Ô∏è Security Fixes Report" > security-report.md
          echo "" >> security-report.md
          echo "Generated: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          if [ -f "site/audit-site.json" ]; then
            echo "## Site Dependencies" >> security-report.md
            vulnerabilities=$(jq -r '.metadata.vulnerabilities | to_entries[] | "\(.key): \(.value)"' site/audit-site.json 2>/dev/null || echo "No vulnerabilities data")
            echo "$vulnerabilities" >> security-report.md
          fi
          
          if [ -f "studio/audit-studio.json" ]; then
            echo "## Studio Dependencies" >> security-report.md  
            vulnerabilities=$(jq -r '.metadata.vulnerabilities | to_entries[] | "\(.key): \(.value)"' studio/audit-studio.json 2>/dev/null || echo "No vulnerabilities data")
            echo "$vulnerabilities" >> security-report.md
          fi
          
          echo "‚úÖ Security report generated"

      - name: üîÑ Check for Changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes to commit"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git diff --stat
          fi

      - name: üíæ Commit Auto-fixes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Security Auto-Fix Bot"
          
          git add -A
          git commit -m "üîß Automated security fixes

          - ESLint auto-fixes applied
          - Dependency vulnerabilities patched  
          - TypeScript 'any' types improved
          - Security audit completed
          
          Generated by: Auto Security Fixes workflow"

      - name: üöÄ Push Changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git push origin ${{ github.ref_name }}
          echo "‚úÖ Security fixes pushed to repository"

  # Safe PR handling job (no script injection vulnerabilities)
  handle-dependency-prs:
    name: ü§ñ Handle Dependency PRs (Safe)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.actor == 'dependabot[bot]'
    
    steps:
      - name: üîç Check PR Details (Safe)
        id: pr-check
        env:
          # Use environment variables to prevent script injection
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "üîç Analyzing PR: $PR_NUMBER"
          echo "Title: $PR_TITLE"
          
          # Check if this is a security update
          if echo "$PR_TITLE" | grep -i "security\|vulnerability\|cve"; then
            echo "is_security=true" >> $GITHUB_OUTPUT
            echo "üîí Security-related PR detected"
          else
            echo "is_security=false" >> $GITHUB_OUTPUT
            echo "üì¶ Regular dependency update"
          fi

          # Check if it's a patch or minor update
          if echo "$PR_TITLE" | grep -E "patch|minor"; then
            echo "is_safe_update=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Safe update (patch/minor) detected"
          else
            echo "is_safe_update=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Major update detected"
          fi

      - name: ‚úÖ Auto-approve Security PRs
        if: steps.pr-check.outputs.is_security == 'true' || steps.pr-check.outputs.is_safe_update == 'true'
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          gh pr review --approve "$PR_NUMBER" --body "ü§ñ Auto-approved security/patch update" || {
            echo "‚ö†Ô∏è Failed to auto-approve PR - may require manual approval"
            echo "This could be due to branch protection rules or permissions"
          }

      - name: üîÄ Auto-merge Safe PRs  
        if: steps.pr-check.outputs.is_security == 'true' || steps.pr-check.outputs.is_safe_update == 'true'
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          if gh pr merge "$PR_NUMBER" --auto --squash; then
            echo "üéâ PR queued for auto-merge after checks pass"
          else
            echo "‚ö†Ô∏è Auto-merge failed - may require manual merge"
            echo "Possible reasons:"
            echo "  - Branch protection rules prevent auto-merge"
            echo "  - Required status checks not passed"
            echo "  - Insufficient permissions"
          fi

      - name: üí¨ Comment on Major Updates
        if: steps.pr-check.outputs.is_safe_update == 'false' && steps.pr-check.outputs.is_security == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          gh pr comment "$PR_NUMBER" --body "‚ö†Ô∏è **Major version update detected!**

          This PR contains major version changes that may include breaking changes.
          Please review manually before merging.

          üîç **Review checklist:**
          - [ ] Check CHANGELOG for breaking changes
          - [ ] Run tests locally
          - [ ] Verify deployment works

          ü§ñ *Auto-merge skipped for safety*"