name: "DO THE IMPORT NOW"

on:
    workflow_dispatch:

env:
    TF_IN_AUTOMATION: true
    TF_VAR_cloudflare_api_token: ${{ secrets.TERRAFORM_ACCESS }}
    TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    TF_VAR_cipher_client_id: ${{ secrets.CIPHER_CLIENT_ID }}
    TF_VAR_cipher_client_secret: ${{ secrets.CIPHER_CLIENT_SECRET }}
    TF_VAR_cipher_issuer_url: "https://cipher.wenzelarifiandi.com"

jobs:
    import-everything:
        name: "Import All Resources"
        runs-on: ubuntu-latest
        environment: prod
        permissions:
            contents: write

        defaults:
            run:
                working-directory: infrastructure/cloudflare-access

        steps:
            - name: Checkout repository
              uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@651471c36a6092792c552e8b1bef71e592b462d8 # v3.1.1
              with:
                  terraform_version: 1.9.0

            - name: Terraform Init
              run: terraform init

            - name: Import Application
              run: |
                  echo "ðŸ“¥ Importing Access Application..."
                  terraform import \
                    -input=false \
                    cloudflare_zero_trust_access_application.cipher \
                    "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/2768b19d-a8a6-4866-b42f-f4881629edaf" || true

            - name: Import Identity Provider
              run: |
                  echo "ðŸ“¥ Importing Identity Provider..."
                  terraform import \
                    -input=false \
                    cloudflare_zero_trust_access_identity_provider.cipher_oidc \
                    "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/8dea90ab-5226-4b41-b8a0-3e9db7d91c7e" || true

            - name: Import Policy 1
              run: |
                  echo "ðŸ“¥ Importing Policy 1 (OIDC Users)..."
                  terraform import \
                    -input=false \
                    cloudflare_zero_trust_access_policy.cipher_oidc_policy \
                    "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/2768b19d-a8a6-4866-b42f-f4881629edaf/be65f06d-b4ec-4629-9da1-d1bf04be52a7" || true

            - name: Import Policy 2
              run: |
                  echo "ðŸ“¥ Importing Policy 2 (Service Token)..."
                  terraform import \
                    -input=false \
                    cloudflare_zero_trust_access_policy.cipher_service_policy \
                    "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/2768b19d-a8a6-4866-b42f-f4881629edaf/9986f955-5498-44f4-8a24-32489bb47eaa" || true

            - name: Try Import Service Token
              continue-on-error: true
              run: |
                  echo "ðŸ“¥ Attempting to import Service Token (may not exist)..."
                  # Get token ID
                  TOKEN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.TERRAFORM_ACCESS }}" \
                       "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/access/service_tokens" | \
                       jq -r '.result[] | select(.name | test("Cipher"; "i")) | .id' | head -1)

                  if [[ -n "$TOKEN_ID" ]] && [[ "$TOKEN_ID" != "null" ]]; then
                      echo "Found token: $TOKEN_ID"
                      terraform import \
                        -input=false \
                        cloudflare_zero_trust_access_service_token.cipher_service_token \
                        "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/$TOKEN_ID" || echo "Token import failed (may need to be recreated)"
                  else
                      echo "No service token found - will be created on next apply"
                  fi

            - name: Show Imported State
              run: |
                  echo "âœ… Successfully imported resources!"
                  echo ""
                  echo "ðŸ“‹ Current Terraform state:"
                  terraform state list

                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "## âœ… Import Successful!" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### Imported Resources:" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  terraform state list >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY

            - name: Run Plan
              id: plan
              run: |
                  echo "ðŸŽ¯ Running terraform plan..."
                  terraform plan -no-color -out=cfplan | tee plan.txt

                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "## ðŸ“Š Terraform Plan" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  cat plan.txt | head -n 100 >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY

            - name: Commit State to Remote Backend (if configured)
              continue-on-error: true
              run: |
                  echo "Note: If using remote backend, state is already saved"
                  echo "If using local backend, you'll need to commit terraform.tfstate"

            - name: Success Message
              run: |
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "## ðŸŽ‰ All Done!" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "All resources have been imported into Terraform state." >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### âœ… What's Next:" >> $GITHUB_STEP_SUMMARY
                  echo "- The main cloudflare-access.yml workflow will now work!" >> $GITHUB_STEP_SUMMARY
                  echo "- Future changes to main branch will automatically apply" >> $GITHUB_STEP_SUMMARY
                  echo "- No more 'already exists' errors!" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "You can now relax ðŸ˜Ž" >> $GITHUB_STEP_SUMMARY
