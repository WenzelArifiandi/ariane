---
import '../styles/global.css'
import '../styles/gloss.css'
import AWCustomStyles from '../components/AWCustomStyles.astro'
import Analytics from '@vercel/analytics/astro'

interface Props {
  title?: string
  description?: string
  ogImage?: string
  pathname?: string
}

const { title, description, ogImage, pathname } = Astro.props as Props

// Site defaults
const siteTitle = 'Wenzel Arifiandi'
const siteDescription = 'A personal website by Wenzel Arifiandi'
const siteUrl = 'https://wenzelarifiandi.com'
const siteImage = '/og.png'

// Computed per-page values
const pageTitle = title ? `${title} — ${siteTitle}` : siteTitle
const pageDescription = description ?? siteDescription
const pageImage = ogImage ? new URL(ogImage, siteUrl).toString() : new URL(siteImage, siteUrl).toString()
const pageUrl = pathname ? new URL(pathname, siteUrl).toString() : siteUrl
---

<!DOCTYPE html>
<html lang="en" class="antialiased 2xl:text-[20px]" data-theme="light">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>{pageTitle}</title>
    <meta name="description" content={pageDescription} />

    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={pageDescription} />
    <meta property="og:image" content={pageImage} />
    <meta property="og:url" content={pageUrl} />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={pageDescription} />
    <meta name="twitter:image" content={pageImage} />

    <link rel="canonical" href={pageUrl} />
    <link rel="icon" href="/favicon.svg" />
    <!-- Material Symbols for M3 icons -->
    <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin>
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@24,500,0,0&display=swap" />
    <script type="module">
      const { startRegistration, startAuthentication } = await import('https://esm.sh/@simplewebauthn/browser@13.1.2?target=es2022&bundle');

      const qs = (sel) => document.querySelector(sel);

      async function refreshAuth() {
        try {
          const res = await fetch('/api/auth/session', { credentials: 'same-origin' });
          if (!res.ok) throw new Error('session check failed');
          const data = await res.json();
          const authed = !!data?.authenticated;
          const studio = qs('#studio-link');
          if (studio) {
            studio.style.display = authed ? '' : 'none';
            const a = studio.querySelector('a');
            if (a) {
              a.href = (location.hostname === 'localhost') ? 'http://localhost:3333/' : 'https://studio.wenzelarifiandi.com';
            }
          }
          const passkeyBtn = qs('#creator-passkey');
          if (passkeyBtn) {
            const label = passkeyBtn.querySelector('.label');
            const icon = passkeyBtn.querySelector('.icon');
            if (authed) {
              passkeyBtn.dataset.mode = 'signout';
              if (label) label.textContent = 'Sign out';
              if (icon) icon.textContent = 'logout';
              passkeyBtn.disabled = false;
            } else {
              passkeyBtn.dataset.mode = 'signin';
              if (label) label.textContent = 'Sign in with passkey';
              if (icon) icon.textContent = 'fingerprint';
              passkeyBtn.disabled = false;
            }
          }
        } catch {}
      }

      async function handlePasskeyClick() {
        const btn = qs('#creator-passkey');
        const labelEl = btn?.querySelector('.label');
        const iconEl = btn?.querySelector('.icon');
        const origLabel = labelEl?.textContent;
        try {
          if (btn) { btn.disabled = true; btn.setAttribute('aria-busy', 'true'); }
          if (labelEl) labelEl.textContent = 'Working…';
          if (iconEl) iconEl.textContent = 'hourglass_top';
        } catch {}
        const currentMode = (qs('#creator-passkey')?.dataset.mode) || 'signin';
        if (currentMode === 'signout') {
          try {
            await fetch('/api/auth/logout', { method: 'POST', credentials: 'same-origin' });
            await refreshAuth();
          } finally {
            if (btn) { btn.disabled = false; btn.removeAttribute('aria-busy'); }
            if (labelEl && origLabel) labelEl.textContent = origLabel;
            if (iconEl) iconEl.textContent = 'fingerprint';
          }
          return;
        }
        try {
          let email = (localStorage.getItem('maker_email') || '').trim();
          if (!email) {
            email = (window.prompt('Enter your email to continue') || '').trim();
            if (!email || !email.includes('@')) throw new Error('no-email');
            localStorage.setItem('maker_email', email);
          }
          const status = await fetch(`/api/auth/approval-status?email=${encodeURIComponent(email)}`, { credentials: 'same-origin' }).then(r => r.json()).catch(() => ({ approved: false }));
          if (!status?.approved && (String(import.meta.env?.ALLOW_REGISTRATION) !== 'true')) {
            const inner = qs('.creator-bar .creator-bar__inner');
            if (inner && !qs('#req-access')) {
              const wrap = document.createElement('div');
              wrap.className = 'access-ui';
              wrap.innerHTML = `<form id="req-access" class="inline">\
                  <label for="email" class="sr-only">Email</label>\
                  <input id="email" name="email" type="email" required placeholder="you@example.com" value="${email}" />\
                  <button class="btn m3 small" type="submit">Request access</button>\
                </form>`;
              inner.appendChild(wrap);
              const form = wrap.querySelector('#req-access');
              form?.addEventListener('submit', async (e) => {
                e.preventDefault();
                const input = wrap.querySelector('#email');
                const e2 = (input && input.value) || '';
                if (e2) localStorage.setItem('maker_email', e2);
                await fetch('/api/auth/request-access', { method: 'POST', credentials: 'same-origin', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email: e2 }) });
                wrap.innerHTML = "<span class='msg'>Thanks — we'll review and notify you.</span>";
              });
            }
            throw new Error('not-approved');
          }
          const roRes = await fetch(`/api/auth/registration-options?email=${encodeURIComponent(email)}`, { credentials: 'same-origin' });
          if (roRes.status === 403) throw new Error('registration-closed');
          if (!roRes.ok) throw new Error(`registration-options-failed:${roRes.status}`);
          const ro = await roRes.json();
          const att = await startRegistration(ro);
          const vr = await fetch('/api/auth/verify-registration', { method: 'POST', credentials: 'same-origin', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(att) });
          if (!vr.ok) throw new Error(`registration-verify-failed:${vr.status}`);
          await refreshAuth();
          if (location.hostname === 'localhost') {
            location.assign('http://localhost:3333/');
          } else {
            location.assign('https://studio.wenzelarifiandi.com');
          }
          return;
        } catch (regErr) {
          console.warn('[maker] registration flow failed:', regErr);
          try {
            const optRes = await fetch('/api/auth/authentication-options', { credentials: 'same-origin' });
            if (!optRes.ok) throw new Error(`auth-options-failed:${optRes.status}`);
            const opts = await optRes.json();
            const assn = await startAuthentication(opts);
            const res = await fetch('/api/auth/verify-authentication', { method: 'POST', credentials: 'same-origin', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(assn) });
            if (!res.ok) throw new Error(`auth-verify-failed:${res.status}`);
            await refreshAuth();
            if (location.hostname === 'localhost') {
              location.assign('http://localhost:3333/');
            } else {
              location.assign('https://studio.wenzelarifiandi.com');
            }
          } catch (err) {
            const inner = qs('.creator-bar .creator-bar__inner');
            if (inner && !qs('#req-access')) {
              const wrap = document.createElement('div');
              wrap.className = 'access-ui';
              wrap.innerHTML = '<form id="req-access" class="inline">\
                  <label for="email" class="sr-only">Email</label>\
                  <input id="email" name="email" type="email" required placeholder="you@example.com" />\
                  <button class="btn m3 small" type="submit">Request access</button>\
                </form>';
              inner.appendChild(wrap);
              const form = wrap.querySelector('#req-access');
              form?.addEventListener('submit', async (e) => {
                e.preventDefault();
                const input = wrap.querySelector('#email');
                const email = (input && input.value) || '';
                await fetch('/api/auth/request-access', { method: 'POST', credentials: 'same-origin', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email }) });
                wrap.innerHTML = "<span class='msg'>Thanks — we'll review and notify you.</span>";
              });
            }
            console.error('[maker] auth flow failed:', err);
          }
        }
        finally {
          try {
            if (btn) { btn.disabled = false; btn.removeAttribute('aria-busy'); }
            if (labelEl && origLabel) labelEl.textContent = origLabel;
            if (iconEl) iconEl.textContent = 'fingerprint';
          } catch {}
        }
      }

      function attachEvents() {
        const passkeyBtn = qs('#creator-passkey');
        if (passkeyBtn) passkeyBtn.addEventListener('click', handlePasskeyClick);
        const makerChip = qs('#creator-toggle');
        const adjustMakerChip = () => {
          if (!makerChip) return;
          const willWrap = makerChip.scrollWidth > makerChip.clientWidth + 2;
          const narrow = window.innerWidth < 420;
          if (narrow || willWrap) makerChip.classList.add('compact'); else makerChip.classList.remove('compact');
        };
        if (makerChip) {
          adjustMakerChip();
          window.addEventListener('resize', adjustMakerChip);
        }
      }

      document.addEventListener('astro:page-load', () => { attachEvents(); refreshAuth(); });
      document.addEventListener('DOMContentLoaded', () => { attachEvents(); refreshAuth(); });
      // @ts-ignore
      globalThis.__maker = { refreshAuth };
    </script>

    <!-- Base styles (keep only non-overlapping rules; AWCustomStyles governs tokens/helpers) -->
    <style>
      *,*::before,*::after{ box-sizing: border-box; }
      html { scroll-behavior: smooth; }
    </style>
    <AWCustomStyles />
  </head>
  <body class="antialiased text-default bg-page tracking-tight">
    <slot />
    {import.meta.env.PROD && <Analytics />}
  </body>
</html>
