---
import '../styles/colors.css'
import '../styles/global.css'
import '../styles/gloss.css'
import '../styles/tokens.css'
import '../styles/overrides.css'
import AWCustomStyles from '../components/AWCustomStyles.astro'
import Analytics from '@vercel/analytics/astro'
import SpeedInsights from '@vercel/speed-insights/astro'
import fs from 'node:fs'
import { fileURLToPath } from 'node:url'

interface Props {
  title?: string
  description?: string
  ogImage?: string
  pathname?: string
}

const { title, description, ogImage, pathname } = Astro.props as Props

const iconEnv = (import.meta.env.PUBLIC_USE_LOCAL_ICONS ?? process.env.PUBLIC_USE_LOCAL_ICONS ?? '').toString().toLowerCase()
const wantsLocalIcons = ['true', '1', 'yes', 'on'].includes(iconEnv)
let hasLocalIconFont = false
if (wantsLocalIcons) {
  try {
    const fontPath = new URL('../public/fonts/material-symbols-rounded.woff2', import.meta.url)
    hasLocalIconFont = fs.existsSync(fileURLToPath(fontPath))
  } catch (error) {
    hasLocalIconFont = false
  }
}
const useLocalIcons = wantsLocalIcons && hasLocalIconFont

if (wantsLocalIcons && !useLocalIcons) {
  console.warn('PUBLIC_USE_LOCAL_ICONS is set but material-symbols-rounded.woff2 is missing in site/public/fonts. Falling back to Google-hosted Material Symbols.')
}

// Site defaults
const siteTitle = 'Wenzel Arifiandi'
const siteDescription = 'A personal website by Wenzel Arifiandi'
const siteUrl = 'https://wenzelarifiandi.com'
const siteImage = '/og.png'

// Computed per-page values
const pageTitle = title ? `${title} â€” ${siteTitle}` : siteTitle
const pageDescription = description ?? siteDescription
const pageImage = ogImage ? new URL(ogImage, siteUrl).toString() : new URL(siteImage, siteUrl).toString()
const pageUrl = pathname ? new URL(pathname, siteUrl).toString() : siteUrl
---

<!DOCTYPE html>
<html lang="en" class="antialiased 2xl:text-[20px]" data-theme="light">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>{pageTitle}</title>
    <meta name="description" content={pageDescription} />

    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={pageDescription} />
    <meta property="og:image" content={pageImage} />
    <meta property="og:url" content={pageUrl} />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={pageDescription} />
    <meta name="twitter:image" content={pageImage} />

    <link rel="canonical" href={pageUrl} />
    <link rel="icon" href="/favicon.svg" />
    <!-- Preload Google Sans fonts for better LCP -->
    <link rel="preload" as="font" type="font/woff2" href="/fonts/google-sans-regular.woff2" crossorigin />
    <link rel="preload" as="font" type="font/woff2" href="/fonts/google-sans-medium.woff2" crossorigin />
    <link rel="preload" as="font" type="font/woff2" href="/fonts/google-sans-bold.woff2" crossorigin />
  <!-- Material Symbols: prefer local font when PUBLIC_USE_LOCAL_ICONS=true; otherwise load from Google Fonts -->
  {useLocalIcons ? (
    <>
      <link rel="preload" as="font" type="font/woff2" href="/fonts/material-symbols-rounded.woff2" crossorigin />
      <style is:inline>
        {`@font-face {
            font-family: 'Material Symbols Rounded Local';
            src: url('/fonts/material-symbols-rounded.woff2') format('woff2');
            font-weight: 100 700;
            font-style: normal;
            font-display: swap;
          }`}
      </style>
      <script is:inline>
        // Mark icons loaded immediately; local font is preloaded and @font-face uses font-display:block
        try { document.documentElement.setAttribute('data-icons-loaded', 'true'); } catch {}
      </script>
    </>
  ) : (
    <>
      <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin>
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link rel="preload" as="style" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&display=swap" />
      <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&display=swap" />
    </>
  )}
    
    <!-- Base styles (keep only non-overlapping rules; AWCustomStyles governs tokens/helpers) -->
    <style>
      *,*::before,*::after{ box-sizing: border-box; }
      html { scroll-behavior: smooth; }

      /* Critical FOIT prevention - hide body until Google Sans loads */
      body {
        font-family: ui-sans-serif, system-ui, sans-serif;
        visibility: hidden;
      }
      html[data-fonts-loaded="true"] body {
        font-family: 'Google Sans', ui-sans-serif, system-ui, sans-serif;
        visibility: visible;
      }

      /* Hide icon glyph text until the font is ready to avoid placeholder text flash */
      .material-symbols-rounded { visibility: hidden; }
      html[data-icons-loaded="true"] .material-symbols-rounded { visibility: visible; }
    </style>
    <AWCustomStyles />
  </head>
  <body class="font-sans antialiased text-default bg-page tracking-tight">
    <slot />
    {import.meta.env.PROD && <Analytics />}
    {import.meta.env.PROD && <SpeedInsights />}

    <!-- Font loading detection script -->
    <script is:inline>
      // Show body once Google Sans is loaded to prevent FOIT
      try {
        const setFontsReady = () => {
          document.documentElement.setAttribute('data-fonts-loaded', 'true');
        };

        if (document.fonts && typeof document.fonts.ready?.then === 'function') {
          // Use Font Loading API if available
          document.fonts.load('1rem "Google Sans"').then(() => {
            if (document.fonts.status === 'loaded') {
              setFontsReady();
            } else {
              document.fonts.ready.then(setFontsReady).catch(setFontsReady);
            }
          }).catch(() => {
            // Fallback: show after timeout to avoid indefinite hiding
            setTimeout(setFontsReady, 3000);
          });
        } else {
          // Fallback for browsers without Font Loading API
          setTimeout(setFontsReady, 100);
        }
      } catch (error) {
        // Emergency fallback
        document.documentElement.setAttribute('data-fonts-loaded', 'true');
      }
    </script>
    
  {!useLocalIcons && (
      <script is:inline>
        // Mark when icon fonts are ready to reveal symbols without flashing fallback text
        try {
          const setReady = () => document.documentElement.setAttribute('data-icons-loaded', 'true');
          const fonts = (document && (document).fonts) || null;
          if (fonts && typeof fonts.ready?.then === 'function') {
            if (fonts.status === 'loaded') setReady();
            else fonts.ready.then(setReady).catch(setReady);
          } else {
            setReady();
          }
        } catch {}
      </script>
    )}
    <script type="module" src="/src/scripts/maker-client.ts" is:inline></script>

    <!-- Hybrid SLO: Trigger ZITADEL session revocation after Cloudflare logout -->
    <script is:inline>
      (function() {
        const params = new URLSearchParams(window.location.search);

        // Check if we just returned from logout
        const isSLO = params.get('slo') === '1' || params.get('__cf_access_message') === 'logged_out';

        if (isSLO) {
          // Remove the param from URL without reload
          params.delete('slo');
          params.delete('__cf_access_message');
          const newUrl = window.location.pathname + (params.toString() ? '?' + params.toString() : '') + window.location.hash;
          window.history.replaceState({}, '', newUrl);

          // Trigger ZITADEL session revocation
          fetch('/api/zitadel/slo', {
            method: 'POST',
            credentials: 'include',
          })
            .then(res => res.json())
            .then(data => {
              if (data.success) {
                console.log('[SLO] ZITADEL sessions revoked:', data.sessionsDeleted);
              } else {
                console.warn('[SLO] Failed:', data.error);
              }
            })
            .catch(err => {
              console.error('[SLO] Error:', err);
            });
        }
      })();
    </script>
  </body>
</html>
