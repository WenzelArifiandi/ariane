---
import '../styles/colors.css'
import '../styles/global.css'
import '../styles/gloss.css'
import '../styles/tokens.css'
import '../styles/overrides.css'
import AWCustomStyles from '../components/AWCustomStyles.astro'
import Analytics from '@vercel/analytics/astro'
import SpeedInsights from '@vercel/speed-insights/astro'

interface Props {
  title?: string
  description?: string
  ogImage?: string
  pathname?: string
}

const { title, description, ogImage, pathname } = Astro.props as Props

// Site defaults
const siteTitle = 'Wenzel Arifiandi'
const siteDescription = 'A personal website by Wenzel Arifiandi'
const siteUrl = 'https://wenzelarifiandi.com'
const siteImage = '/og.png'

// Computed per-page values
const pageTitle = title ? `${title} â€” ${siteTitle}` : siteTitle
const pageDescription = description ?? siteDescription
const pageImage = ogImage ? new URL(ogImage, siteUrl).toString() : new URL(siteImage, siteUrl).toString()
const pageUrl = pathname ? new URL(pathname, siteUrl).toString() : siteUrl
---

<!DOCTYPE html>
<html lang="en" class="antialiased 2xl:text-[20px]" data-theme="light">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>{pageTitle}</title>
    <meta name="description" content={pageDescription} />

    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={pageDescription} />
    <meta property="og:image" content={pageImage} />
    <meta property="og:url" content={pageUrl} />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={pageDescription} />
    <meta name="twitter:image" content={pageImage} />

    <link rel="canonical" href={pageUrl} />
    <link rel="icon" href="/favicon.svg" />
    <link rel="preload" as="image" href="/favicon.svg" imagesrcset="/favicon.svg" />
  <!-- Material Symbols: prefer local font when PUBLIC_USE_LOCAL_ICONS=true; otherwise load from Google Fonts -->
  {((import.meta as any).env?.PUBLIC_USE_LOCAL_ICONS || process.env.PUBLIC_USE_LOCAL_ICONS) ? (
    <>
      <link rel="preload" as="font" type="font/woff2" href="/fonts/material-symbols-rounded.woff2" crossorigin />
      <script is:inline>
        // Mark icons loaded immediately; local font is preloaded and @font-face uses font-display:block
        try { document.documentElement.setAttribute('data-icons-loaded', 'true'); } catch {}
      </script>
    </>
  ) : (
    <>
      <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin>
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link rel="preload" as="style" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&display=swap" />
      <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&display=swap" />
    </>
  )}
    
    <!-- Base styles (keep only non-overlapping rules; AWCustomStyles governs tokens/helpers) -->
    <style>
      *,*::before,*::after{ box-sizing: border-box; }
      html { scroll-behavior: smooth; }
  /* Hide icon glyph text until the font is ready to avoid placeholder text flash */
  .material-symbols-rounded { visibility: hidden; }
  html[data-icons-loaded="true"] .material-symbols-rounded { visibility: visible; }
    </style>
    <AWCustomStyles />
  </head>
  <body class="antialiased text-default bg-page tracking-tight">
    <slot />
    {import.meta.env.PROD && <Analytics />}
    {import.meta.env.PROD && <SpeedInsights />}
    
    {(!((import.meta as any).env?.PUBLIC_USE_LOCAL_ICONS || process.env.PUBLIC_USE_LOCAL_ICONS)) && (
      <script is:inline>
        // Mark when icon fonts are ready to reveal symbols without flashing fallback text
        try {
          const setReady = () => document.documentElement.setAttribute('data-icons-loaded', 'true');
          const fonts = (document && (document).fonts) || null;
          if (fonts && typeof fonts.ready?.then === 'function') {
            if (fonts.status === 'loaded') setReady();
            else fonts.ready.then(setReady).catch(setReady);
          } else {
            setReady();
          }
        } catch {}
      </script>
    )}
    <script type="module" src="/src/scripts/maker-client.ts" is:inline></script>
  </body>
</html>
