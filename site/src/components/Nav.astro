---
const links = [
  { label: 'Hello', href: '#hello' },
  { label: 'Playground', href: '#playground' },
  { label: 'Field Notes', href: '#field-notes' },
  { label: 'Contact', href: '#contact' },
]
const studioHref = import.meta.env.DEV ? 'http://localhost:3333/' : 'https://studio.wenzelarifiandi.com';
// In dev tunnel, we may rely solely on Cloudflare Access (no app OAuth)
const AUTH_MODE = ((import.meta as unknown as { env?: Record<string, unknown> }).env?.AUTH_MODE as string) ?? process.env.AUTH_MODE;
const isAccessOnly = AUTH_MODE === 'cf-access-only';
const isAppAuth = AUTH_MODE === 'app';
// Use Access-first zero-UI signout route; it logs out of Cloudflare Access, then (optionally) Auth0 via /post-access-logout, and returns to root to trigger login.
const cfLogoutHref: string = '/signout';
---

<nav class="sticky top-3 z-50 mx-auto my-3 px-3 sm:px-7" data-access-only={isAccessOnly ? 'true' : 'false'} data-app-auth={isAppAuth ? 'true' : 'false'}>
  <div class="nav-container">
    <div class="nav-inner flex items-center justify-between gap-5 px-4 py-3 relative overflow-hidden isolate">

      <a href="/" class="brand relative z-10">Wenzel Arifiandi</a>

      <ul class="flex items-center gap-3 sm:gap-4 flex-nowrap list-none m-0 p-0 min-w-0 relative z-10">
        {links.map((l) => (
          <li class="whitespace-nowrap">
            <a href={l.href} class="nav-link">{l.label}</a>
          </li>
        ))}

        <li class="whitespace-nowrap">
          <a href={studioHref} class="nav-link">Studio</a>
        </li>

        <li class="relative">
          <button id="creator-toggle" class="chip-m3 inline-flex items-center gap-2"
                  aria-haspopup="true" aria-expanded="false" aria-controls="creator-sheet" title="Maker">
            <svg class="w-4 h-4 text-white" aria-hidden="true" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M11 2l1.2 3.6L16 7l-3.8 1.4L11 12 9.8 8.4 6 7l3.8-1.4L11 2zM19 10l.8 2.4L22 13l-2.2.6L19 16l-.8-2.4L16 13l2.2-.6L19 10zM6 14l1 3 3 1-3 1-1 3-1-3-3-1 3-1 1-3z" fill="currentColor"/>
            </svg>
            <span class="label lg:inline hidden whitespace-nowrap">Maker</span>
          </button>
        </li>
      </ul>
    </div>
  </div>
</nav>


<style>
  /* Apple liquid glass navbar with M3 expressive design */
  .nav-container {
    max-width: 1100px;
    margin: 0 auto;
  }

  .nav-inner {
    border-radius: var(--ariane-glass-radius, 20px);
    background: var(--ariane-glass-tint, rgba(255,255,255,0.1));
    -webkit-backdrop-filter: blur(var(--ariane-glass-blur, 20px));
    backdrop-filter: blur(var(--ariane-glass-blur, 20px));
    border: 1px solid rgba(255,255,255,.30);
    box-shadow:
      0 1px 0 0 var(--ariane-glass-edge-bright, rgba(255,255,255,.2)) inset,
      0 -1px 0 0 var(--ariane-glass-edge-dim, rgba(120,120,160,.15)) inset,
      0 10px 26px var(--ariane-glass-shadow-soft, rgba(0,0,0,.1));
  }

  /* Liquid glass overlay effects */
  .nav-inner::before {
    content: "";
    position: absolute;
    inset: 0;
    pointer-events: none;
    background:
      radial-gradient(120% 60% at 0% 0%, rgba(255,255,255,.25) 0%, transparent 55%),
      linear-gradient(180deg, rgba(255,255,255,.18) 0%, transparent 45%),
      linear-gradient(90deg, rgba(255,255,255,.12), transparent 35%, transparent 65%, rgba(255,255,255,.10));
    mix-blend-mode: screen;
    border-radius: inherit;
  }

  .nav-inner::after {
    content: "";
    position: absolute;
    inset: 0;
    border-radius: inherit;
    box-shadow: 0 0 0 1px rgba(170,180,255,.35) inset;
    pointer-events: none;
  }

  /* Scrolled state enhancement */
  .scrolled .nav-inner {
    background: var(--ariane-glass-tint-scrolled, rgba(255,255,255,0.15));
    box-shadow:
      0 1px 0 0 rgba(255,255,255,.16) inset,
      0 -1px 0 0 rgba(120,120,160,.20) inset,
      0 14px 30px var(--ariane-glass-shadow-soft, rgba(0,0,0,.15));
  }

  /* M3 expressive chip with proper styling */
  .chip-m3 {
    background: var(--md-sys-color-primary, #7150D9);
    color: var(--md-sys-color-on-primary, #fff);
    border: 0;
    border-radius: 999px;
    padding: .45rem .8rem;
    box-shadow: var(--md-sys-elevation-1, 0 6px 20px rgba(0,0,0,.06));
    cursor: pointer;
    font-weight: 650;
    white-space: nowrap;
    max-width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    flex: 0 1 auto;
    transition: transform var(--md-sys-motion-duration-short, 200ms) var(--md-sys-motion-ease-standard, ease-out),
                box-shadow var(--md-sys-motion-duration-short, 200ms) var(--md-sys-motion-ease-standard, ease-out);
  }

  .chip-m3:hover {
    box-shadow: var(--md-sys-elevation-2, 0 12px 28px rgba(0,0,0,.08));
    transform: translateY(-1px);
  }

  /* Brand styling */
  .brand {
    font-weight: 600;
    letter-spacing: .2px;
    color: var(--ariane-text-ink, var(--ink));
    text-decoration: none !important;
  }

  .brand:hover,
  .brand:focus,
  .brand:focus-visible {
    text-decoration: none !important;
  }

  /* Nav link styling - original neat appearance */
  .nav-link {
    color: var(--ariane-text-ink, var(--ink));
    text-decoration: none !important;
    font-weight: 600;
    white-space: nowrap;
    padding: 8px 10px;
    border-radius: 10px;
    transition: background 0.2s ease, color 0.2s ease;
    font-size: var(--body, 1rem);
    line-height: 1.2;
  }

  .nav-link:hover,
  .nav-link:focus,
  .nav-link:visited,
  .nav-link:active {
    background: var(--ariane-hover-wash, rgba(255,255,255,.15));
    color: var(--ariane-text-ink-dim, rgba(0,0,0,.8));
    text-decoration: none !important;
  }

  /* Compact state for narrow screens */
  .chip-m3.compact .label {
    display: none;
  }
  .chip-m3.compact {
    padding: .45rem .6rem;
  }

  /* Responsive label hiding */
  @media (max-width: 500px) {
    .chip-m3 .label {
      display: none;
    }
    .chip-m3 {
      padding: .45rem .6rem;
    }
  }
</style>

<script type="module" is:inline>
  const qs = (s) => document.querySelector(s);
  const toggle = qs('#creator-toggle');
  const navInner = qs('.nav-inner');
  // Darkens the glass as you scroll down
  const onScroll = () => {
    if (window.scrollY > 24) {
      document.documentElement.classList.add('scrolled');
    } else {
      document.documentElement.classList.remove('scrolled');
    }
  };
  addEventListener('scroll', onScroll, { passive: true });
  onScroll();

toggle?.addEventListener('click', () => {
    const html = document.documentElement;
    const open = html.getAttribute('data-creator') === 'open';
    html.setAttribute('data-creator', open ? 'closed' : 'open');
    toggle.setAttribute('aria-expanded', String(!open));
    window.dispatchEvent(new CustomEvent('toggle-creator', { detail: { open: !open } }));
  });

  // Compact the chip based on actual available space, not only viewport width
  const makerChip = toggle;
  let rafId = 0;
  function measureAndToggle() {
    if (!navInner || !makerChip) return;
    // Show full label for accurate measurement
    makerChip.classList.remove('compact');
    // Use a small threshold to avoid subpixel false positives
    const overflow = Math.ceil(navInner.scrollWidth - navInner.clientWidth);
    const needsCompact = overflow > 12; // require a meaningful overflow
    makerChip.classList.toggle('compact', needsCompact);
  }
  function scheduleMeasure() {
    if (rafId) cancelAnimationFrame(rafId);
    rafId = requestAnimationFrame(measureAndToggle);
  }
  // Initial pass
  scheduleMeasure();
  // On container resize
  let ro;
  if ('ResizeObserver' in window && navInner) {
    ro = new ResizeObserver(scheduleMeasure);
    ro.observe(navInner);
  } else {
    window.addEventListener('resize', scheduleMeasure);
  }
  // After fonts are ready (icon/text width may change)
  if (document.fonts && document.fonts.ready) {
    document.fonts.ready.then(scheduleMeasure).catch(() => {});
  }
</script>
