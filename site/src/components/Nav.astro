---
const links = [
  { label: 'Work', href: '#work' },
  { label: 'About', href: '#about' },
  { label: 'Contact', href: '#contact' },
]
const studioHref = import.meta.env.DEV ? 'http://localhost:3333/' : 'https://studio.wenzelarifiandi.com';
// In dev tunnel, we may rely solely on Cloudflare Access (no app OAuth)
const AUTH_MODE = ((import.meta as unknown as { env?: Record<string, unknown> }).env?.AUTH_MODE as string) ?? process.env.AUTH_MODE;
const isAccessOnly = AUTH_MODE === 'cf-access-only';
const isAppAuth = AUTH_MODE === 'app';
// Use Access-first zero-UI signout route; it logs out of Cloudflare Access, then (optionally) Auth0 via /post-access-logout, and returns to root to trigger login.
const cfLogoutHref: string = '/signout';
---

<nav class="sticky top-3 z-50 mx-auto my-3 px-3 sm:px-7" data-access-only={isAccessOnly ? 'true' : 'false'} data-app-auth={isAppAuth ? 'true' : 'false'}>
  <div class="max-w-screen-2xl mx-auto">
    <div class="nav-inner flex items-center justify-between gap-5 px-4 py-3 rounded-2xl backdrop-blur-md border border-white/30 bg-white/10 shadow-lg relative overflow-hidden isolate">
      <!-- Glass effect overlays -->
      <div class="absolute inset-0 pointer-events-none bg-gradient-to-br from-white/25 via-white/18 to-transparent mix-blend-screen"></div>
      <div class="absolute inset-0 rounded-inherit border border-indigo-200/35 pointer-events-none"></div>

      <a href="/" class="font-semibold tracking-wide text-ink no-underline relative z-10">Wenzel Arifiandi</a>

      <ul class="flex items-center gap-3 sm:gap-4 flex-nowrap list-none m-0 p-0 min-w-0 relative z-10">
        {links.map((l) => (
          <li class="whitespace-nowrap">
            <a href={l.href} class="text-ink no-underline font-semibold px-2 py-2 rounded-lg hover:bg-white/20 hover:text-ink/80 transition-all">{l.label}</a>
          </li>
        ))}

        <li id="studio-link" class="hidden whitespace-nowrap">
          <a href={studioHref} class="text-ink no-underline font-semibold px-2 py-2 rounded-lg hover:bg-white/20 hover:text-ink/80 transition-all">Studio</a>
        </li>

        {isAccessOnly && (
          <li id="cf-signout-link" class="whitespace-nowrap">
            <a id="cf-logout" class="inline-flex items-center gap-2 px-2 py-2 rounded-full text-ink hover:bg-white/20 transition-all" href={cfLogoutHref || '/signout'} title="Sign out">
              <svg class="w-4 h-4" aria-hidden="true" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M10 17l-1.4-1.4L12.2 12 8.6 8.4 10 7l5 5-5 5z" fill="currentColor"/>
                <path d="M4 5h6v2H6v10h4v2H4a2 2 0 01-2-2V7a2 2 0 012-2z" fill="currentColor"/>
              </svg>
              <span class="label sm:inline hidden">Sign out</span>
            </a>
          </li>
        )}

        {isAppAuth && (
          <li id="signin-link" class="hidden whitespace-nowrap">
            <a href="/api/oauth/github/start?redirect=/" class="text-ink no-underline font-semibold px-2 py-2 rounded-lg hover:bg-white/20 hover:text-ink/80 transition-all">Sign in</a>
          </li>
        )}

        {isAppAuth && (
          <li id="signout-link" class="hidden">
            <form method="get" action="/api/auth/logout" class="inline">
              <input type="hidden" name="next" value={Astro.url?.pathname + (Astro.url?.search || '') || '/'} />
              <button class="inline-flex items-center gap-2 bg-red-500 text-white rounded-full px-4 py-2 font-semibold hover:bg-red-600 transition-all">Sign out</button>
            </form>
          </li>
        )}

        <li class="relative">
          <button id="creator-toggle" class="chip-m3 inline-flex items-center gap-2 bg-primary text-white rounded-full px-3 py-2 font-semibold shadow-md hover:shadow-lg hover:-translate-y-0.5 transition-all max-w-full overflow-hidden text-ellipsis flex-shrink-0"
                  aria-haspopup="true" aria-expanded="false" aria-controls="creator-sheet" title="Maker">
            <svg class="w-4 h-4 text-white" aria-hidden="true" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M11 2l1.2 3.6L16 7l-3.8 1.4L11 12 9.8 8.4 6 7l3.8-1.4L11 2zM19 10l.8 2.4L22 13l-2.2.6L19 16l-.8-2.4L16 13l2.2-.6L19 10zM6 14l1 3 3 1-3 1-1 3-1-3-3-1 3-1 1-3z" fill="currentColor"/>
            </svg>
            <span class="label lg:inline hidden whitespace-nowrap">Maker</span>
          </button>
        </li>
      </ul>
    </div>
  </div>
</nav>


<style>
  /* Scrolled state enhancement */
  .scrolled .nav-inner {
    @apply bg-white/20 shadow-xl;
  }

  /* Compact state for narrow screens */
  .chip-m3.compact .label {
    @apply hidden;
  }
  .chip-m3.compact {
    @apply px-2;
  }
</style>

<script type="module" is:inline>
  const qs = (s) => document.querySelector(s);
  const toggle = qs('#creator-toggle');
  const navInner = qs('.nav-inner');
  const studio = qs('#studio-link');
  const navEl = qs('nav.nav');
  // const ACCESS_ONLY = navEl?.dataset?.accessOnly === 'true'; // Unused for now
  const APP_AUTH = navEl?.dataset?.appAuth === 'true';

  // Darkens the glass as you scroll down
  const onScroll = () => {
    if (window.scrollY > 24) {
      document.documentElement.classList.add('scrolled');
    } else {
      document.documentElement.classList.remove('scrolled');
    }
  };
  addEventListener('scroll', onScroll, { passive: true });
  onScroll();

  async function refreshAuth() {
    try {
      const res = await fetch('/api/auth/session');
      const data = await res.json();
      const authed = !!data?.authenticated;
      if (studio) studio.style.display = authed ? '' : 'none';
      const signin = qs('#signin-link');
      const signout = qs('#signout-link');
      if (signin) signin.style.display = authed ? 'none' : '';
      if (signout) signout.style.display = authed ? '' : 'none';
    } catch {}
  }

toggle?.addEventListener('click', () => {
    const html = document.documentElement;
    const open = html.getAttribute('data-creator') === 'open';
    html.setAttribute('data-creator', open ? 'closed' : 'open');
    toggle.setAttribute('aria-expanded', String(!open));
    window.dispatchEvent(new CustomEvent('toggle-creator', { detail: { open: !open } }));
  });

  // In Access-only mode, there is no app session concept to fetch
  if (APP_AUTH) {
    (async () => { await refreshAuth(); })();
  } else {
    // Hide auth UI if it somehow exists
    const signin = qs('#signin-link');
    const signout = qs('#signout-link');
    if (signin) signin.remove();
    if (signout) signout.remove();
    // Ensure Studio link is visible in Access-only mode
    if (studio) studio.style.display = '';
    // If link targets our zero-UI flow (/signout) or IdP URL, leave it; otherwise ensure absolute returnTo for CF logout URLs
    const cfLogout = qs('#cf-logout');
    if (cfLogout) {
      try {
        const origin = window.location.origin;
        const href = cfLogout.getAttribute('href') || '';
        if (href.startsWith('https://') || href.startsWith('http://') || href.startsWith('/signout')) {
          // keep as-is
        } else if (href.startsWith('/cdn-cgi/access/logout')) {
          const u = new URL(href, origin);
          if (!u.searchParams.has('returnTo')) {
            const rt = new URL('/logged-out', origin).toString();
            u.searchParams.set('returnTo', rt);
          }
          cfLogout.setAttribute('href', u.toString());
        } else {
          // If it's /signout, keep as-is
          if (!href) cfLogout.setAttribute('href', '/signout');
        }
        // Fallback: force full-page navigation on click
        cfLogout.addEventListener('click', () => {
          try {
            const href = cfLogout.getAttribute('href');
            if (href) window.location.href = href;
          } catch {}
        }, { once: true });
      } catch {}
    }
  }

  // Compact the chip based on actual available space, not only viewport width
  const makerChip = toggle;
  let rafId = 0;
  function measureAndToggle() {
    if (!navInner || !makerChip) return;
    // Show full label for accurate measurement
    makerChip.classList.remove('compact');
    // Use a small threshold to avoid subpixel false positives
    const overflow = Math.ceil(navInner.scrollWidth - navInner.clientWidth);
    const needsCompact = overflow > 12; // require a meaningful overflow
    makerChip.classList.toggle('compact', needsCompact);
  }
  function scheduleMeasure() {
    if (rafId) cancelAnimationFrame(rafId);
    rafId = requestAnimationFrame(measureAndToggle);
  }
  // Initial pass
  scheduleMeasure();
  // On container resize
  let ro;
  if ('ResizeObserver' in window && navInner) {
    ro = new ResizeObserver(scheduleMeasure);
    ro.observe(navInner);
  } else {
    window.addEventListener('resize', scheduleMeasure);
  }
  // After fonts are ready (icon/text width may change)
  if (document.fonts && document.fonts.ready) {
    document.fonts.ready.then(scheduleMeasure).catch(() => {});
  }
</script>
