---
const links = [
  { label: 'Work', href: '#work' },
  { label: 'About', href: '#about' },
  { label: 'Contact', href: '#contact' },
]
const studioHref = import.meta.env.DEV ? 'http://localhost:3333/' : 'https://studio.wenzelarifiandi.com';
// In dev tunnel, we may rely solely on Cloudflare Access (no app OAuth)
const AUTH_MODE = ((import.meta as unknown as { env?: Record<string, unknown> }).env?.AUTH_MODE as string) ?? process.env.AUTH_MODE;
const isAccessOnly = AUTH_MODE === 'cf-access-only';
const isAppAuth = AUTH_MODE === 'app';
// Use Access-first zero-UI signout route; it logs out of Cloudflare Access, then (optionally) Auth0 via /post-access-logout, and returns to root to trigger login.
const cfLogoutHref: string = '/signout';
---

<nav class="nav" data-access-only={isAccessOnly ? 'true' : 'false'} data-app-auth={isAppAuth ? 'true' : 'false'}>
  <div class="container align-hero">
    <div class="nav-inner glass">
      <a href="/" class="brand">Wenzel Arifiandi</a>
      <ul class="links">
        {links.map((l) => (
          <li><a href={l.href}>{l.label}</a></li>
        ))}
  <li id="studio-link" style="display:none"><a href={studioHref}>Studio</a></li>
  {isAccessOnly && (
    <li id="cf-signout-link">
  <a id="cf-logout" class="nav-action shrinkable" href={cfLogoutHref || '/signout'} title="Sign out">
        <svg class="icon-svg" aria-hidden="true" width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M10 17l-1.4-1.4L12.2 12 8.6 8.4 10 7l5 5-5 5z" fill="currentColor"/>
          <path d="M4 5h6v2H6v10h4v2H4a2 2 0 01-2-2V7a2 2 0 012-2z" fill="currentColor"/>
        </svg>
        <span class="label">Sign out</span>
      </a>
    </li>
  )}
  {isAppAuth && (
    <li id="signin-link" style="display:none"><a href="/api/oauth/github/start?redirect=/">Sign in</a></li>
  )}
  {isAppAuth && (
      <li id="signout-link" style="display:none">
        <form method="get" action="/api/auth/logout">
          <input type="hidden" name="next" value={Astro.url?.pathname + (Astro.url?.search || '') || '/'} />
          <button class="btn m3" style="background:#ef4444">Sign out</button>
        </form>
      </li>
  )}
        <li class="creator-wrap">
          <button id="creator-toggle" class="chip m3" aria-haspopup="true" aria-expanded="false" aria-controls="creator-sheet" title="Maker">
            <svg class="icon-svg" aria-hidden="true" width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M11 2l1.2 3.6L16 7l-3.8 1.4L11 12 9.8 8.4 6 7l3.8-1.4L11 2zM19 10l.8 2.4L22 13l-2.2.6L19 16l-.8-2.4L16 13l2.2-.6L19 10zM6 14l1 3 3 1-3 1-1 3-1-3-3-1 3-1 1-3z" fill="currentColor"/>
            </svg>
            <span class="label">Maker</span>
          </button>
        </li>
      </ul>
    </div>
  </div>
</nav>


<style>
  /* Periwinkle frosted glass navbar using centralized colors */

  .nav { position: sticky; top: var(--nav-offset, 12px); z-index: 50; margin: var(--nav-offset, 12px) auto .75rem; padding: 0 clamp(12px, 3vw, 28px); }
  .nav-inner {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 20px;
    padding: 12px 16px;
    border-radius: var(--ariane-glass-radius);
    background: var(--ariane-glass-tint);
    -webkit-backdrop-filter: blur(var(--ariane-glass-blur));
    backdrop-filter: blur(var(--ariane-glass-blur));
    border: 1px solid rgba(255,255,255,.30);
    box-shadow:
      0 1px 0 0 var(--ariane-glass-edge-bright) inset,
      0 -1px 0 0 var(--ariane-glass-edge-dim) inset,
      0 10px 26px var(--ariane-glass-shadow-soft);
    position: relative;
    overflow: clip;
    isolation: isolate;
  }

  .nav-inner::before {
    content: "";
    position: absolute;
    inset: 0;
    pointer-events: none;
    background:
      radial-gradient(120% 60% at 0% 0%, rgba(255,255,255,.25) 0%, transparent 55%),
      linear-gradient(180deg, rgba(255,255,255,.18) 0%, transparent 45%),
      linear-gradient(90deg, rgba(255,255,255,.12), transparent 35%, transparent 65%, rgba(255,255,255,.10));
    mix-blend-mode: screen;
  }

  .nav-inner::after {
    content: "";
    position: absolute;
    inset: 0;
    border-radius: inherit;
    box-shadow: 0 0 0 1px rgba(170,180,255,.35) inset;
    pointer-events: none;
  }

  /* Scrolled state */
  .scrolled .nav-inner {
    background: var(--ariane-glass-tint-scrolled);
    box-shadow:
      0 1px 0 0 rgba(255,255,255,.16) inset,
      0 -1px 0 0 rgba(120,120,160,.20) inset,
      0 14px 30px var(--ariane-glass-shadow-soft);
  }

  /* Allow links row to shrink without forcing overflow */
  .nav-inner .links { min-width: 0; }
  .glass {
    /* Remove old glass styles - using new system above */
  }
  .brand {
    font-weight: 600;
    letter-spacing: .2px;
    color: var(--ariane-text-ink);
    text-decoration: none;
  }
  .links {
    display: flex; gap: 14px; align-items: center; flex-wrap: nowrap;
    list-style: none;
    margin: 0; padding: 0;
  }
  .links li { list-style: none; white-space: nowrap; }
  .links a {
    color: var(--ariane-text-ink);
    text-decoration: none;
    font-weight: 600;
    white-space: nowrap;
    padding: 8px 10px;
    border-radius: 10px;
    transition: background 0.2s ease, color 0.2s ease;
  }
  .links a:hover {
    background: var(--ariane-hover-wash);
    color: var(--ariane-text-ink-dim);
  }
  /* — minimal fixes only — */

/* 1) Kill underline on the brand link (e.g., “Ariane”) */
.brand {
  text-decoration: none !important;
}
.brand:hover,
.brand:focus,
.brand:focus-visible {
  text-decoration: none !important;
}

/* M3 expressive: chip */
.links a, .chip.m3, .btn.m3 { font-size: var(--body); line-height: 1.2; font-family: inherit; }

  .chip.m3 {
    background: var(--md-sys-color-primary);
    color: var(--md-sys-color-on-primary);
    border: 0;
    border-radius: 999px;
    padding: .45rem .8rem;
    box-shadow: var(--md-sys-elevation-1);
    cursor: pointer;
    font-weight: 650;
    white-space: nowrap;
    max-width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    flex: 0 1 auto;
    transition: transform var(--md-sys-motion-duration-short) var(--md-sys-motion-ease-standard), box-shadow var(--md-sys-motion-duration-short) var(--md-sys-motion-ease-standard);
  }
.chip.m3:hover { box-shadow: var(--md-sys-elevation-2); transform: translateY(-1px); }
  .chip.m3 .material-symbols-rounded { color: #fff; font-variation-settings: 'FILL' 1, 'wght' 600, 'GRAD' 0, 'opsz' 24; font-size: 18px; vertical-align: -2px; margin-right: .35rem; }
  .chip.m3 .icon-svg { color: #fff; display:inline-block; vertical-align:-2px; margin-right: .35rem; }

  /* Prevent nav actions from wrapping to a second line */
  .links { flex-wrap: nowrap; }
  .links .nav-action { display: inline-flex; align-items: center; gap: .35rem; padding: .4rem .6rem; border-radius: 999px; }
  .links .nav-action .label { white-space: nowrap; }
  @media (max-width: 560px) {
    .links { gap: .5rem; }
    .links .nav-action.shrinkable .label { display: none; }
  }
@media (max-width: 500px) {
  .chip.m3 .label { display: none; }
  .chip.m3 { padding: .45rem .6rem; }
}
/* JS may add .compact when measuring wrap */
.chip.m3.compact .label { display: none; }
.chip.m3.compact { padding: .45rem .6rem; }

.creator-wrap { position: relative; }
</style>

<script type="module" is:inline>
  const qs = (s) => document.querySelector(s);
  const toggle = qs('#creator-toggle');
  const navInner = qs('.nav-inner');
  const studio = qs('#studio-link');
  const navEl = qs('nav.nav');
  // const ACCESS_ONLY = navEl?.dataset?.accessOnly === 'true'; // Unused for now
  const APP_AUTH = navEl?.dataset?.appAuth === 'true';

  // Darkens the glass as you scroll down
  const onScroll = () => {
    if (window.scrollY > 24) {
      document.documentElement.classList.add('scrolled');
    } else {
      document.documentElement.classList.remove('scrolled');
    }
  };
  addEventListener('scroll', onScroll, { passive: true });
  onScroll();

  async function refreshAuth() {
    try {
      const res = await fetch('/api/auth/session');
      const data = await res.json();
      const authed = !!data?.authenticated;
      if (studio) studio.style.display = authed ? '' : 'none';
      const signin = qs('#signin-link');
      const signout = qs('#signout-link');
      if (signin) signin.style.display = authed ? 'none' : '';
      if (signout) signout.style.display = authed ? '' : 'none';
    } catch {}
  }

toggle?.addEventListener('click', () => {
    const html = document.documentElement;
    const open = html.getAttribute('data-creator') === 'open';
    html.setAttribute('data-creator', open ? 'closed' : 'open');
    toggle.setAttribute('aria-expanded', String(!open));
    window.dispatchEvent(new CustomEvent('toggle-creator', { detail: { open: !open } }));
  });

  // In Access-only mode, there is no app session concept to fetch
  if (APP_AUTH) {
    (async () => { await refreshAuth(); })();
  } else {
    // Hide auth UI if it somehow exists
    const signin = qs('#signin-link');
    const signout = qs('#signout-link');
    if (signin) signin.remove();
    if (signout) signout.remove();
    // Ensure Studio link is visible in Access-only mode
    if (studio) studio.style.display = '';
    // If link targets our zero-UI flow (/signout) or IdP URL, leave it; otherwise ensure absolute returnTo for CF logout URLs
    const cfLogout = qs('#cf-logout');
    if (cfLogout) {
      try {
        const origin = window.location.origin;
        const href = cfLogout.getAttribute('href') || '';
        if (href.startsWith('https://') || href.startsWith('http://') || href.startsWith('/signout')) {
          // keep as-is
        } else if (href.startsWith('/cdn-cgi/access/logout')) {
          const u = new URL(href, origin);
          if (!u.searchParams.has('returnTo')) {
            const rt = new URL('/logged-out', origin).toString();
            u.searchParams.set('returnTo', rt);
          }
          cfLogout.setAttribute('href', u.toString());
        } else {
          // If it's /signout, keep as-is
          if (!href) cfLogout.setAttribute('href', '/signout');
        }
        // Fallback: force full-page navigation on click
        cfLogout.addEventListener('click', () => {
          try {
            const href = cfLogout.getAttribute('href');
            if (href) window.location.href = href;
          } catch {}
        }, { once: true });
      } catch {}
    }
  }

  // Compact the chip based on actual available space, not only viewport width
  const makerChip = toggle;
  let rafId = 0;
  function measureAndToggle() {
    if (!navInner || !makerChip) return;
    // Show full label for accurate measurement
    makerChip.classList.remove('compact');
    // Use a small threshold to avoid subpixel false positives
    const overflow = Math.ceil(navInner.scrollWidth - navInner.clientWidth);
    const needsCompact = overflow > 12; // require a meaningful overflow
    makerChip.classList.toggle('compact', needsCompact);
  }
  function scheduleMeasure() {
    if (rafId) cancelAnimationFrame(rafId);
    rafId = requestAnimationFrame(measureAndToggle);
  }
  // Initial pass
  scheduleMeasure();
  // On container resize
  let ro;
  if ('ResizeObserver' in window && navInner) {
    ro = new ResizeObserver(scheduleMeasure);
    ro.observe(navInner);
  } else {
    window.addEventListener('resize', scheduleMeasure);
  }
  // After fonts are ready (icon/text width may change)
  if (document.fonts && document.fonts.ready) {
    document.fonts.ready.then(scheduleMeasure).catch(() => {});
  }
</script>
