---
const title = "Hi there!";
const subtitle = "This site is being refreshed!";
const ctaHref = "#work";
const ctaLabel = "See Work";
---

  <div class="creator-bar">
    <div class="creator-bar__inner container align-hero">
      <div class="creator-bar__text"><span class="material-symbols-rounded text-icon" aria-hidden="true">auto_awesome</span><span class="text-label">Entering Wenzel's maker space</span></div>
      <div class="creator-bar__actions">
        <button id="creator-passkey" class="btn m3 small" data-mode="signin">
          <span class="material-symbols-rounded icon" aria-hidden="true">fingerprint</span>
          <span class="label">Sign in with passkey</span>
        </button>
      </div>
    </div>
  </div>

<section class="container align-hero">
  <div class="hero">
    <div class="hero__inner">
    <h1 class="hero__title">{title}</h1>
    <p class="hero__subtitle">{subtitle}</p>
    <a class="btn m3" href={ctaHref}>{ctaLabel}</a>
    </div>
  </div>
</section>

<style>
  /* Soft mauve token (fallback) if you don’t already have it */
  :root { --mauve: #b99ad9; }

  @supports (color: oklch(0.7 0.1 0)) {
    :root { --mauve: oklch(0.80 0.07 315); } /* muted mauve, not “dead”, not neon */
  }

  .hero {
    position: relative;
    isolation: isolate;
    border-radius: 28px;
    overflow: hidden;
    margin: 1rem 0 2rem;
    /* width is handled by .container */
    min-height: clamp(360px, 60svh, 680px);

    /* Sakura → Mauve diagonal */
    background:
      linear-gradient(135deg, var(--sakura) 0%, var(--mauve) 100%);
  }

  /* Slim creator bar that reveals above content */
  .creator-bar {
    --p: 0; /* spring-driven progress (0..1) */
    max-height: calc(72px * var(--p));
    overflow: hidden;
    background: var(--page);
    /* remove divider line to avoid “line under strip” */
    opacity: var(--p);
  }

  .creator-bar__inner { display: flex; align-items: center; justify-content: space-between; gap: .75rem; }
  .creator-bar__text { font-weight: 650; opacity: .9; font-size: var(--body); display:inline-flex; align-items:center; gap:.4rem; }
  .creator-bar__actions { display: inline-flex; gap: .5rem; align-items: center; margin-left: auto; padding-right: 1px; }
  .btn.small { padding: .5rem .8rem; border-radius: 999px; font-size: var(--body); line-height: 1.2; border: 0; }
  .creator-bar .btn.m3 { border: 0; box-shadow: none; }
  @media (max-width: 480px) {
    #creator-passkey .label { display: none; }
    #creator-passkey { padding-left: .6rem; padding-right: .6rem; }
  }
  .material-symbols-rounded { font-variation-settings: 'FILL' 0, 'wght' 500, 'GRAD' 0, 'opsz' 24; font-size: 20px; display: inline-flex; align-items: center; }

  /* Radial glossy bloom */
  .hero::after {
    content: "";
    position: absolute; inset: -30% -20% auto -20%;
    height: 80%;
    background:
      radial-gradient(60% 60% at 50% 0%,
        rgba(255,255,255,.55) 0%,
        rgba(255,255,255,.15) 40%,
        transparent 70%);
    pointer-events: none;
    mix-blend-mode: soft-light;
  }

  .hero__inner { position: relative; z-index: 1; padding-block: 56px; display: grid; gap: 1rem; padding-inline: var(--pad-x); }

  /* Fallback: if JS spring doesn’t run, honor attribute toggle */
  html[data-creator="open"] .creator-bar { --p: 1; max-height: 72px; opacity: 1; }
  .hero__title {
    font-size: var(--h1);
    line-height: 1.05;
    letter-spacing: -0.02em;
    color: color-mix(in oklab, var(--ink), black 10%);
  }
  .hero__subtitle {
    font-size: clamp(1.05rem, .6vw + 1rem, 1.25rem);
    color: color-mix(in oklab, var(--ink), black 20%);
    max-width: 38ch;
  }

  /* Buttons inherit global M3 pill styling; keep spacing helpers */
  .btn { display:inline-flex; align-items:center; gap:.6rem; padding:.75rem 1rem; width: fit-content; }

  /* Material 3 overrides (scoped in this component so they beat global) */
  .btn.m3 { background: var(--md-sys-color-primary, #7150D9); color: var(--md-sys-color-on-primary, #fff); border-radius: 999px; box-shadow: var(--md-sys-elevation-1, 0 6px 20px rgba(0,0,0,.06)); }
  .btn.m3::after { content: none; }
  .btn.m3:hover {
    transform: translateY(-1px);
    box-shadow: var(--md-sys-elevation-2, 0 12px 28px rgba(0,0,0,.08));
  }
  .btn.m3:focus-visible {
    outline: 2px solid color-mix(in oklab, var(--md-sys-color-primary, var(--wisteria)), white 20%);
    outline-offset: 3px;
  }

  /* rounded top stays because bar has same radius as hero */
  .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0; }
  .access-ui form.inline { display: inline-flex; gap: .5rem; align-items: center; margin-left: .5rem; }
  .access-ui input[type="email"] { padding: .5rem .7rem; border-radius: 999px; border: 1px solid color-mix(in oklab, var(--ink), transparent 80%); background: #fff; color: var(--ink); }
</style>
<script type="module">
  const qs = (s) => document.querySelector(s);
  const passkeyBtn = qs('#creator-passkey');
  const logoutBtn = qs('#creator-logout');

  async function refreshAuth() {
    try {
      const res = await fetch('/api/auth/session');
      const data = await res.json();
      const authed = !!data?.authenticated;
      if (passkeyBtn) {
        passkeyBtn.querySelector('.label').textContent = authed ? 'You\'re signed in' : 'Sign in with passkey';
        passkeyBtn.toggleAttribute('disabled', authed);
      }
      if (logoutBtn) logoutBtn.style.display = authed ? '' : 'none';
    } catch {}
  }

  (async () => { await refreshAuth(); })();

  // Expressive spring for the bar (fast spatial)
  let raf = 0; let current = 0; let target = 0; let lastTs = 0;
  const SPRING = { stiffness: 540, damping: 32 };
  function tick(ts){
    if(!lastTs) lastTs = ts; const dt = Math.min(32, ts - lastTs); lastTs = ts;
    const delta = target - current;
    const accel = delta * SPRING.stiffness - current * SPRING.damping;
    current += accel * (dt / 1000);
    current = Math.max(0, Math.min(1, current));
    document.querySelector('.creator-bar')?.style.setProperty('--p', String(current));
    if (Math.abs(delta) > 0.002) { raf = requestAnimationFrame(tick); } else { current = target; document.querySelector('.creator-bar')?.style.setProperty('--p', String(target)); raf = 0; lastTs = 0; }
  }

  // Passkey logic moved to maker-client.ts

  // Support toggling via Creator chip in nav
  window.addEventListener('toggle-creator', (ev) => {
    const open = ev.detail?.open;
    target = open ? 1 : 0;
    if (!raf) raf = requestAnimationFrame(tick);
    if (open) passkeyBtn?.focus?.();
  });
</script>
