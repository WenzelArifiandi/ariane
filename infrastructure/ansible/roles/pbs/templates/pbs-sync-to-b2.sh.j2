#!/usr/bin/env bash
# PBS to Backblaze B2 sync script
# Generated by Ansible for {{ ansible_hostname }}

set -euo pipefail

# Configuration
SRC="{{ pbs_datastore_path }}"
DST="{{ b2_remote_name }}:{{ b2_bucket }}/pbs-{{ pbs_datastore_name }}"
LOG_FILE="{{ rclone_log_file }}"
LOCK_FILE="/var/run/pbs-rclone-sync.lock"

# Function to log with timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

# Function to cleanup lock file
cleanup() {
    [[ -f "$LOCK_FILE" ]] && rm -f "$LOCK_FILE"
}

# Set trap for cleanup
trap cleanup EXIT

# Check if another sync is running
if [[ -f "$LOCK_FILE" ]]; then
    log "ERROR: Another sync process is already running (lock file: $LOCK_FILE)"
    exit 1
fi

# Create lock file
echo $$ > "$LOCK_FILE"

log "Starting PBS to B2 sync: $SRC → $DST"

# Check if source directory exists
if [[ ! -d "$SRC" ]]; then
    log "ERROR: Source directory does not exist: $SRC"
    exit 1
fi

# Perform the sync
/usr/bin/rclone sync "$SRC" "$DST" \
    --config /var/lib/pbs/.config/rclone/rclone.conf \
    --s3-endpoint "{{ b2_endpoint }}" \
    --fast-list \
    --transfers 8 \
    --checkers 16 \
    --bwlimit-off \
    --log-file "$LOG_FILE" \
    --log-level INFO \
    --stats 5m \
    --stats-file-name-length 0 \
    --retries 3 \
    --low-level-retries 10 \
    --timeout 0 \
    --contimeout 60s \
    --exclude "*.tmp" \
    --exclude ".backup.tmp.*" \
    --progress 2>&1 | tee -a "$LOG_FILE" || {
        log "ERROR: rclone sync failed with exit code $?"
        exit 1
    }

# Calculate sync statistics
SYNC_SIZE=$(du -sh "$SRC" 2>/dev/null | cut -f1 || echo "unknown")
log "Sync completed successfully. Datastore size: $SYNC_SIZE"
log "Sync finished: $SRC → $DST"

# Optional: Send notification (uncomment if you want email notifications)
# echo "PBS sync to B2 completed successfully at $(date)" | mail -s "PBS Backup Sync Complete" admin@wenzelarifiandi.com